/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * FastAPI JWT Auth Boilerplate
 * FastAPI Boilerplate with JWT Authentication
 * OpenAPI spec version: 0.1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  BodyLogin,
  HTTPValidationError,
  Token,
  User,
  UserCreate
} from '../../models'
import { api } from '../../../../api/mutator/axiosInstance';



/**
 * OAuth2 compatible token login, get an access token for future requests
 * @summary Login Access Token
 */
export const login = (
    bodyLogin: BodyLogin,
 signal?: AbortSignal
) => {
      
      const formUrlEncoded = new URLSearchParams();
if(bodyLogin.grant_type !== undefined && bodyLogin.grant_type !== null) {
 formUrlEncoded.append('grant_type', bodyLogin.grant_type)
 }
formUrlEncoded.append('username', bodyLogin.username)
formUrlEncoded.append('password', bodyLogin.password)
if(bodyLogin.scope !== undefined) {
 formUrlEncoded.append('scope', bodyLogin.scope)
 }
if(bodyLogin.client_id !== undefined && bodyLogin.client_id !== null) {
 formUrlEncoded.append('client_id', bodyLogin.client_id)
 }
if(bodyLogin.client_secret !== undefined && bodyLogin.client_secret !== null) {
 formUrlEncoded.append('client_secret', bodyLogin.client_secret)
 }

      return api<Token>(
      {url: `/auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/x-www-form-urlencoded', },
       data: formUrlEncoded, signal
    },
      );
    }
  


export const getLoginMutationOptions = <TData = Awaited<ReturnType<typeof login>>, TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: BodyLogin}, TContext>, }
) => {
const mutationKey = ['login'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof login>>, {data: BodyLogin}> = (props) => {
          const {data} = props ?? {};

          return  login(data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: BodyLogin}, TContext>}

    export type LoginMutationResult = NonNullable<Awaited<ReturnType<typeof login>>>
    export type LoginMutationBody = BodyLogin
    export type LoginMutationError = HTTPValidationError

    /**
 * @summary Login Access Token
 */
export const useLogin = <TData = Awaited<ReturnType<typeof login>>, TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: BodyLogin}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {data: BodyLogin},
        TContext
      > => {

      const mutationOptions = getLoginMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Register a new user
 * @summary Register
 */
export const register = (
    userCreate: UserCreate,
 signal?: AbortSignal
) => {
      
      
      return api<User>(
      {url: `/auth/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userCreate, signal
    },
      );
    }
  


export const getRegisterMutationOptions = <TData = Awaited<ReturnType<typeof register>>, TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: UserCreate}, TContext>, }
) => {
const mutationKey = ['register'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof register>>, {data: UserCreate}> = (props) => {
          const {data} = props ?? {};

          return  register(data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: UserCreate}, TContext>}

    export type RegisterMutationResult = NonNullable<Awaited<ReturnType<typeof register>>>
    export type RegisterMutationBody = UserCreate
    export type RegisterMutationError = HTTPValidationError

    /**
 * @summary Register
 */
export const useRegister = <TData = Awaited<ReturnType<typeof register>>, TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: UserCreate}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {data: UserCreate},
        TContext
      > => {

      const mutationOptions = getRegisterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Get current user
 * @summary Read Users Me
 */
export const getMe = (
    
 signal?: AbortSignal
) => {
      
      
      return api<User>(
      {url: `/auth/me`, method: 'GET', signal
    },
      );
    }
  

export const getGetMeQueryKey = () => {
    return [`/auth/me`] as const;
    }

    
export const getGetMeInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getMe>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getMe>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMe>>> = ({ signal }) => getMe(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getMe>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetMeInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getMe>>>
export type GetMeInfiniteQueryError = unknown


export function useGetMeInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getMe>>>, TError = unknown>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getMe>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMe>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMeInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getMe>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getMe>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMe>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMeInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getMe>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getMe>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read Users Me
 */

export function useGetMeInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getMe>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getMe>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetMeInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetMeQueryOptions = <TData = Awaited<ReturnType<typeof getMe>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMe>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMe>>> = ({ signal }) => getMe(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMe>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetMeQueryResult = NonNullable<Awaited<ReturnType<typeof getMe>>>
export type GetMeQueryError = unknown


export function useGetMe<TData = Awaited<ReturnType<typeof getMe>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMe>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMe>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMe<TData = Awaited<ReturnType<typeof getMe>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMe>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMe>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMe<TData = Awaited<ReturnType<typeof getMe>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMe>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read Users Me
 */

export function useGetMe<TData = Awaited<ReturnType<typeof getMe>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMe>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetMeQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Logout user by clearing the cookie
 * @summary Logout
 */
export const logout = (
    
 signal?: AbortSignal
) => {
      
      
      return api<unknown>(
      {url: `/auth/logout`, method: 'POST', signal
    },
      );
    }
  


export const getLogoutMutationOptions = <TData = Awaited<ReturnType<typeof logout>>, TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,void, TContext>, }
) => {
const mutationKey = ['logout'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof logout>>, void> = () => {
          

          return  logout()
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,void, TContext>}

    export type LogoutMutationResult = NonNullable<Awaited<ReturnType<typeof logout>>>
    
    export type LogoutMutationError = unknown

    /**
 * @summary Logout
 */
export const useLogout = <TData = Awaited<ReturnType<typeof logout>>, TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,void, TContext>, }
): UseMutationResult<
        TData,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getLogoutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    