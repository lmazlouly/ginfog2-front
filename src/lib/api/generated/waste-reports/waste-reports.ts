/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * FastAPI JWT Auth Boilerplate
 * FastAPI Boilerplate with JWT Authentication
 * OpenAPI spec version: 0.1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  BodyCreateWasteReport,
  BodyUpdateWasteReport,
  GetWasteReportsParams,
  HTTPValidationError,
  WasteReportList,
  WasteReportResponse,
  WasteTypesResponse
} from '../../models'
import { api } from '../../../../api/mutator/axiosInstance';



/**
 * Create a new waste report with optional photo uploads.
Rate limited to 10 reports per day per user.
 * @summary Create Waste Report
 */
export const createWasteReport = (
    bodyCreateWasteReport: BodyCreateWasteReport,
 signal?: AbortSignal
) => {
      
      const formData = new FormData();
formData.append('street_address', bodyCreateWasteReport.street_address)
formData.append('city', bodyCreateWasteReport.city)
formData.append('postal_code', bodyCreateWasteReport.postal_code)
if(bodyCreateWasteReport.latitude !== undefined && bodyCreateWasteReport.latitude !== null) {
 formData.append('latitude', bodyCreateWasteReport.latitude.toString())
 }
if(bodyCreateWasteReport.longitude !== undefined && bodyCreateWasteReport.longitude !== null) {
 formData.append('longitude', bodyCreateWasteReport.longitude.toString())
 }
formData.append('waste_type', bodyCreateWasteReport.waste_type)
formData.append('quantity_estimate', bodyCreateWasteReport.quantity_estimate)
formData.append('urgency_level', bodyCreateWasteReport.urgency_level)
if(bodyCreateWasteReport.description !== undefined && bodyCreateWasteReport.description !== null) {
 formData.append('description', bodyCreateWasteReport.description)
 }
formData.append('reporter_name', bodyCreateWasteReport.reporter_name)
if(bodyCreateWasteReport.reporter_phone !== undefined && bodyCreateWasteReport.reporter_phone !== null) {
 formData.append('reporter_phone', bodyCreateWasteReport.reporter_phone)
 }
if(bodyCreateWasteReport.photos !== undefined) {
 bodyCreateWasteReport.photos.forEach(value => formData.append('photos', value));
 }

      return api<WasteReportResponse>(
      {url: `/waste-reports`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData, signal
    },
      );
    }
  


export const getCreateWasteReportMutationOptions = <TData = Awaited<ReturnType<typeof createWasteReport>>, TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: BodyCreateWasteReport}, TContext>, }
) => {
const mutationKey = ['createWasteReport'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createWasteReport>>, {data: BodyCreateWasteReport}> = (props) => {
          const {data} = props ?? {};

          return  createWasteReport(data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: BodyCreateWasteReport}, TContext>}

    export type CreateWasteReportMutationResult = NonNullable<Awaited<ReturnType<typeof createWasteReport>>>
    export type CreateWasteReportMutationBody = BodyCreateWasteReport
    export type CreateWasteReportMutationError = HTTPValidationError

    /**
 * @summary Create Waste Report
 */
export const useCreateWasteReport = <TData = Awaited<ReturnType<typeof createWasteReport>>, TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: BodyCreateWasteReport}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {data: BodyCreateWasteReport},
        TContext
      > => {

      const mutationOptions = getCreateWasteReportMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Get user's waste reports with filtering, pagination, and sorting.
 * @summary Get Waste Reports
 */
export const getWasteReports = (
    params?: GetWasteReportsParams,
 signal?: AbortSignal
) => {
      
      
      return api<WasteReportList>(
      {url: `/waste-reports`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetWasteReportsQueryKey = (params?: GetWasteReportsParams,) => {
    return [`/waste-reports`, ...(params ? [params]: [])] as const;
    }

    
export const getGetWasteReportsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getWasteReports>>, GetWasteReportsParams['cursor']>, TError = HTTPValidationError>(params?: GetWasteReportsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWasteReports>>, TError, TData, Awaited<ReturnType<typeof getWasteReports>>, QueryKey, GetWasteReportsParams['cursor']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWasteReportsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWasteReports>>, QueryKey, GetWasteReportsParams['cursor']> = ({ signal, pageParam }) => getWasteReports({...params, cursor: pageParam || params?.['cursor']}, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWasteReports>>, TError, TData, Awaited<ReturnType<typeof getWasteReports>>, QueryKey, GetWasteReportsParams['cursor']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetWasteReportsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getWasteReports>>>
export type GetWasteReportsInfiniteQueryError = HTTPValidationError


export function useGetWasteReportsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getWasteReports>>, GetWasteReportsParams['cursor']>, TError = HTTPValidationError>(
 params: undefined |  GetWasteReportsParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWasteReports>>, TError, TData, Awaited<ReturnType<typeof getWasteReports>>, QueryKey, GetWasteReportsParams['cursor']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWasteReports>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWasteReportsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getWasteReports>>, GetWasteReportsParams['cursor']>, TError = HTTPValidationError>(
 params?: GetWasteReportsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWasteReports>>, TError, TData, Awaited<ReturnType<typeof getWasteReports>>, QueryKey, GetWasteReportsParams['cursor']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWasteReports>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWasteReportsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getWasteReports>>, GetWasteReportsParams['cursor']>, TError = HTTPValidationError>(
 params?: GetWasteReportsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWasteReports>>, TError, TData, Awaited<ReturnType<typeof getWasteReports>>, QueryKey, GetWasteReportsParams['cursor']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Waste Reports
 */

export function useGetWasteReportsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getWasteReports>>, GetWasteReportsParams['cursor']>, TError = HTTPValidationError>(
 params?: GetWasteReportsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWasteReports>>, TError, TData, Awaited<ReturnType<typeof getWasteReports>>, QueryKey, GetWasteReportsParams['cursor']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetWasteReportsInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetWasteReportsQueryOptions = <TData = Awaited<ReturnType<typeof getWasteReports>>, TError = HTTPValidationError>(params?: GetWasteReportsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWasteReports>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWasteReportsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWasteReports>>> = ({ signal }) => getWasteReports(params, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWasteReports>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetWasteReportsQueryResult = NonNullable<Awaited<ReturnType<typeof getWasteReports>>>
export type GetWasteReportsQueryError = HTTPValidationError


export function useGetWasteReports<TData = Awaited<ReturnType<typeof getWasteReports>>, TError = HTTPValidationError>(
 params: undefined |  GetWasteReportsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWasteReports>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWasteReports>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWasteReports<TData = Awaited<ReturnType<typeof getWasteReports>>, TError = HTTPValidationError>(
 params?: GetWasteReportsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWasteReports>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWasteReports>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWasteReports<TData = Awaited<ReturnType<typeof getWasteReports>>, TError = HTTPValidationError>(
 params?: GetWasteReportsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWasteReports>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Waste Reports
 */

export function useGetWasteReports<TData = Awaited<ReturnType<typeof getWasteReports>>, TError = HTTPValidationError>(
 params?: GetWasteReportsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWasteReports>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetWasteReportsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Get a specific waste report by ID.
Users can only access their own reports unless they are admin.
 * @summary Get Waste Report
 */
export const getWasteReport = (
    reportId: number,
 signal?: AbortSignal
) => {
      
      
      return api<WasteReportResponse>(
      {url: `/waste-reports/${reportId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetWasteReportQueryKey = (reportId: number,) => {
    return [`/waste-reports/${reportId}`] as const;
    }

    
export const getGetWasteReportInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getWasteReport>>>, TError = HTTPValidationError>(reportId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWasteReport>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWasteReportQueryKey(reportId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWasteReport>>> = ({ signal }) => getWasteReport(reportId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(reportId),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWasteReport>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetWasteReportInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getWasteReport>>>
export type GetWasteReportInfiniteQueryError = HTTPValidationError


export function useGetWasteReportInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getWasteReport>>>, TError = HTTPValidationError>(
 reportId: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWasteReport>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWasteReport>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWasteReportInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getWasteReport>>>, TError = HTTPValidationError>(
 reportId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWasteReport>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWasteReport>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWasteReportInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getWasteReport>>>, TError = HTTPValidationError>(
 reportId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWasteReport>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Waste Report
 */

export function useGetWasteReportInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getWasteReport>>>, TError = HTTPValidationError>(
 reportId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWasteReport>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetWasteReportInfiniteQueryOptions(reportId,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetWasteReportQueryOptions = <TData = Awaited<ReturnType<typeof getWasteReport>>, TError = HTTPValidationError>(reportId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWasteReport>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWasteReportQueryKey(reportId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWasteReport>>> = ({ signal }) => getWasteReport(reportId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(reportId),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWasteReport>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetWasteReportQueryResult = NonNullable<Awaited<ReturnType<typeof getWasteReport>>>
export type GetWasteReportQueryError = HTTPValidationError


export function useGetWasteReport<TData = Awaited<ReturnType<typeof getWasteReport>>, TError = HTTPValidationError>(
 reportId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWasteReport>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWasteReport>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWasteReport<TData = Awaited<ReturnType<typeof getWasteReport>>, TError = HTTPValidationError>(
 reportId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWasteReport>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWasteReport>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWasteReport<TData = Awaited<ReturnType<typeof getWasteReport>>, TError = HTTPValidationError>(
 reportId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWasteReport>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Waste Report
 */

export function useGetWasteReport<TData = Awaited<ReturnType<typeof getWasteReport>>, TError = HTTPValidationError>(
 reportId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWasteReport>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetWasteReportQueryOptions(reportId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update a waste report.
Users can only edit their own pending reports unless they are admin.
 * @summary Update Waste Report
 */
export const updateWasteReport = (
    reportId: number,
    bodyUpdateWasteReport: BodyUpdateWasteReport,
 ) => {
      
      const formData = new FormData();
if(bodyUpdateWasteReport.street_address !== undefined && bodyUpdateWasteReport.street_address !== null) {
 formData.append('street_address', bodyUpdateWasteReport.street_address)
 }
if(bodyUpdateWasteReport.city !== undefined && bodyUpdateWasteReport.city !== null) {
 formData.append('city', bodyUpdateWasteReport.city)
 }
if(bodyUpdateWasteReport.postal_code !== undefined && bodyUpdateWasteReport.postal_code !== null) {
 formData.append('postal_code', bodyUpdateWasteReport.postal_code)
 }
if(bodyUpdateWasteReport.latitude !== undefined && bodyUpdateWasteReport.latitude !== null) {
 formData.append('latitude', bodyUpdateWasteReport.latitude.toString())
 }
if(bodyUpdateWasteReport.longitude !== undefined && bodyUpdateWasteReport.longitude !== null) {
 formData.append('longitude', bodyUpdateWasteReport.longitude.toString())
 }
if(bodyUpdateWasteReport.waste_type !== undefined && bodyUpdateWasteReport.waste_type !== null) {
 formData.append('waste_type', bodyUpdateWasteReport.waste_type)
 }
if(bodyUpdateWasteReport.quantity_estimate !== undefined && bodyUpdateWasteReport.quantity_estimate !== null) {
 formData.append('quantity_estimate', bodyUpdateWasteReport.quantity_estimate)
 }
if(bodyUpdateWasteReport.urgency_level !== undefined && bodyUpdateWasteReport.urgency_level !== null) {
 formData.append('urgency_level', bodyUpdateWasteReport.urgency_level)
 }
if(bodyUpdateWasteReport.description !== undefined && bodyUpdateWasteReport.description !== null) {
 formData.append('description', bodyUpdateWasteReport.description)
 }
if(bodyUpdateWasteReport.reporter_name !== undefined && bodyUpdateWasteReport.reporter_name !== null) {
 formData.append('reporter_name', bodyUpdateWasteReport.reporter_name)
 }
if(bodyUpdateWasteReport.reporter_phone !== undefined && bodyUpdateWasteReport.reporter_phone !== null) {
 formData.append('reporter_phone', bodyUpdateWasteReport.reporter_phone)
 }
if(bodyUpdateWasteReport.photos !== undefined) {
 bodyUpdateWasteReport.photos.forEach(value => formData.append('photos', value));
 }

      return api<WasteReportResponse>(
      {url: `/waste-reports/${reportId}`, method: 'PUT',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      );
    }
  


export const getUpdateWasteReportMutationOptions = <TData = Awaited<ReturnType<typeof updateWasteReport>>, TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{reportId: number;data: BodyUpdateWasteReport}, TContext>, }
) => {
const mutationKey = ['updateWasteReport'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateWasteReport>>, {reportId: number;data: BodyUpdateWasteReport}> = (props) => {
          const {reportId,data} = props ?? {};

          return  updateWasteReport(reportId,data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{reportId: number;data: BodyUpdateWasteReport}, TContext>}

    export type UpdateWasteReportMutationResult = NonNullable<Awaited<ReturnType<typeof updateWasteReport>>>
    export type UpdateWasteReportMutationBody = BodyUpdateWasteReport
    export type UpdateWasteReportMutationError = HTTPValidationError

    /**
 * @summary Update Waste Report
 */
export const useUpdateWasteReport = <TData = Awaited<ReturnType<typeof updateWasteReport>>, TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{reportId: number;data: BodyUpdateWasteReport}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {reportId: number;data: BodyUpdateWasteReport},
        TContext
      > => {

      const mutationOptions = getUpdateWasteReportMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Delete a waste report.
Users can only delete their own pending reports unless they are admin.
 * @summary Delete Waste Report
 */
export const deleteWasteReport = (
    reportId: number,
 ) => {
      
      
      return api<unknown>(
      {url: `/waste-reports/${reportId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteWasteReportMutationOptions = <TData = Awaited<ReturnType<typeof deleteWasteReport>>, TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{reportId: number}, TContext>, }
) => {
const mutationKey = ['deleteWasteReport'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteWasteReport>>, {reportId: number}> = (props) => {
          const {reportId} = props ?? {};

          return  deleteWasteReport(reportId,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{reportId: number}, TContext>}

    export type DeleteWasteReportMutationResult = NonNullable<Awaited<ReturnType<typeof deleteWasteReport>>>
    
    export type DeleteWasteReportMutationError = HTTPValidationError

    /**
 * @summary Delete Waste Report
 */
export const useDeleteWasteReport = <TData = Awaited<ReturnType<typeof deleteWasteReport>>, TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{reportId: number}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {reportId: number},
        TContext
      > => {

      const mutationOptions = getDeleteWasteReportMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Get available waste types with descriptions.
Public endpoint - no authentication required.
 * @summary Get Waste Types
 */
export const getWasteTypes = (
    
 signal?: AbortSignal
) => {
      
      
      return api<WasteTypesResponse>(
      {url: `/waste-reports/types`, method: 'GET', signal
    },
      );
    }
  

export const getGetWasteTypesQueryKey = () => {
    return [`/waste-reports/types`] as const;
    }

    
export const getGetWasteTypesInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getWasteTypes>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWasteTypes>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWasteTypesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWasteTypes>>> = ({ signal }) => getWasteTypes(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWasteTypes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetWasteTypesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getWasteTypes>>>
export type GetWasteTypesInfiniteQueryError = unknown


export function useGetWasteTypesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getWasteTypes>>>, TError = unknown>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWasteTypes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWasteTypes>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWasteTypesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getWasteTypes>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWasteTypes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWasteTypes>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWasteTypesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getWasteTypes>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWasteTypes>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Waste Types
 */

export function useGetWasteTypesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getWasteTypes>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWasteTypes>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetWasteTypesInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetWasteTypesQueryOptions = <TData = Awaited<ReturnType<typeof getWasteTypes>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWasteTypes>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWasteTypesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWasteTypes>>> = ({ signal }) => getWasteTypes(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWasteTypes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetWasteTypesQueryResult = NonNullable<Awaited<ReturnType<typeof getWasteTypes>>>
export type GetWasteTypesQueryError = unknown


export function useGetWasteTypes<TData = Awaited<ReturnType<typeof getWasteTypes>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWasteTypes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWasteTypes>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWasteTypes<TData = Awaited<ReturnType<typeof getWasteTypes>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWasteTypes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWasteTypes>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWasteTypes<TData = Awaited<ReturnType<typeof getWasteTypes>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWasteTypes>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Waste Types
 */

export function useGetWasteTypes<TData = Awaited<ReturnType<typeof getWasteTypes>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWasteTypes>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetWasteTypesQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



