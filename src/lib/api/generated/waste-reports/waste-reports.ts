/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * FastAPI JWT Auth Boilerplate
 * FastAPI Boilerplate with JWT Authentication
 * OpenAPI spec version: 0.1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetWasteReportsParams,
  HTTPValidationError,
  WasteReport,
  WasteReportCreate,
  WasteReportUpdate
} from '../../models'
import { api } from '../../../../api/mutator/axiosInstance';



/**
 * Create a new waste report
 * @summary Create Waste Report
 */
export const createWasteReport = (
    wasteReportCreate: WasteReportCreate,
 signal?: AbortSignal
) => {
      
      
      return api<WasteReport>(
      {url: `/waste-reports`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: wasteReportCreate, signal
    },
      );
    }
  


export const getCreateWasteReportMutationOptions = <TData = Awaited<ReturnType<typeof createWasteReport>>, TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: WasteReportCreate}, TContext>, }
) => {
const mutationKey = ['createWasteReport'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createWasteReport>>, {data: WasteReportCreate}> = (props) => {
          const {data} = props ?? {};

          return  createWasteReport(data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: WasteReportCreate}, TContext>}

    export type CreateWasteReportMutationResult = NonNullable<Awaited<ReturnType<typeof createWasteReport>>>
    export type CreateWasteReportMutationBody = WasteReportCreate
    export type CreateWasteReportMutationError = HTTPValidationError

    /**
 * @summary Create Waste Report
 */
export const useCreateWasteReport = <TData = Awaited<ReturnType<typeof createWasteReport>>, TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: WasteReportCreate}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {data: WasteReportCreate},
        TContext
      > => {

      const mutationOptions = getCreateWasteReportMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Retrieve waste reports.
Regular users get only their reports, superusers get all reports.
 * @summary Read Waste Reports
 */
export const getWasteReports = (
    params?: GetWasteReportsParams,
 signal?: AbortSignal
) => {
      
      
      return api<WasteReport[]>(
      {url: `/waste-reports`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetWasteReportsQueryKey = (params?: GetWasteReportsParams,) => {
    return [`/waste-reports`, ...(params ? [params]: [])] as const;
    }

    
export const getGetWasteReportsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getWasteReports>>, GetWasteReportsParams['cursor']>, TError = HTTPValidationError>(params?: GetWasteReportsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWasteReports>>, TError, TData, Awaited<ReturnType<typeof getWasteReports>>, QueryKey, GetWasteReportsParams['cursor']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWasteReportsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWasteReports>>, QueryKey, GetWasteReportsParams['cursor']> = ({ signal, pageParam }) => getWasteReports({...params, cursor: pageParam || params?.['cursor']}, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWasteReports>>, TError, TData, Awaited<ReturnType<typeof getWasteReports>>, QueryKey, GetWasteReportsParams['cursor']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetWasteReportsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getWasteReports>>>
export type GetWasteReportsInfiniteQueryError = HTTPValidationError


export function useGetWasteReportsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getWasteReports>>, GetWasteReportsParams['cursor']>, TError = HTTPValidationError>(
 params: undefined |  GetWasteReportsParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWasteReports>>, TError, TData, Awaited<ReturnType<typeof getWasteReports>>, QueryKey, GetWasteReportsParams['cursor']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWasteReports>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWasteReportsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getWasteReports>>, GetWasteReportsParams['cursor']>, TError = HTTPValidationError>(
 params?: GetWasteReportsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWasteReports>>, TError, TData, Awaited<ReturnType<typeof getWasteReports>>, QueryKey, GetWasteReportsParams['cursor']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWasteReports>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWasteReportsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getWasteReports>>, GetWasteReportsParams['cursor']>, TError = HTTPValidationError>(
 params?: GetWasteReportsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWasteReports>>, TError, TData, Awaited<ReturnType<typeof getWasteReports>>, QueryKey, GetWasteReportsParams['cursor']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read Waste Reports
 */

export function useGetWasteReportsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getWasteReports>>, GetWasteReportsParams['cursor']>, TError = HTTPValidationError>(
 params?: GetWasteReportsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWasteReports>>, TError, TData, Awaited<ReturnType<typeof getWasteReports>>, QueryKey, GetWasteReportsParams['cursor']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetWasteReportsInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetWasteReportsQueryOptions = <TData = Awaited<ReturnType<typeof getWasteReports>>, TError = HTTPValidationError>(params?: GetWasteReportsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWasteReports>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWasteReportsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWasteReports>>> = ({ signal }) => getWasteReports(params, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWasteReports>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetWasteReportsQueryResult = NonNullable<Awaited<ReturnType<typeof getWasteReports>>>
export type GetWasteReportsQueryError = HTTPValidationError


export function useGetWasteReports<TData = Awaited<ReturnType<typeof getWasteReports>>, TError = HTTPValidationError>(
 params: undefined |  GetWasteReportsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWasteReports>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWasteReports>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWasteReports<TData = Awaited<ReturnType<typeof getWasteReports>>, TError = HTTPValidationError>(
 params?: GetWasteReportsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWasteReports>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWasteReports>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWasteReports<TData = Awaited<ReturnType<typeof getWasteReports>>, TError = HTTPValidationError>(
 params?: GetWasteReportsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWasteReports>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read Waste Reports
 */

export function useGetWasteReports<TData = Awaited<ReturnType<typeof getWasteReports>>, TError = HTTPValidationError>(
 params?: GetWasteReportsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWasteReports>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetWasteReportsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Get waste report by ID.
Regular users can only access their own reports, superusers can access any report.
 * @summary Read Waste Report
 */
export const getWasteReport = (
    wasteReportId: number,
 signal?: AbortSignal
) => {
      
      
      return api<WasteReport>(
      {url: `/waste-reports/${wasteReportId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetWasteReportQueryKey = (wasteReportId: number,) => {
    return [`/waste-reports/${wasteReportId}`] as const;
    }

    
export const getGetWasteReportInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getWasteReport>>>, TError = HTTPValidationError>(wasteReportId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWasteReport>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWasteReportQueryKey(wasteReportId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWasteReport>>> = ({ signal }) => getWasteReport(wasteReportId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(wasteReportId),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWasteReport>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetWasteReportInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getWasteReport>>>
export type GetWasteReportInfiniteQueryError = HTTPValidationError


export function useGetWasteReportInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getWasteReport>>>, TError = HTTPValidationError>(
 wasteReportId: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWasteReport>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWasteReport>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWasteReportInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getWasteReport>>>, TError = HTTPValidationError>(
 wasteReportId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWasteReport>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWasteReport>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWasteReportInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getWasteReport>>>, TError = HTTPValidationError>(
 wasteReportId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWasteReport>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read Waste Report
 */

export function useGetWasteReportInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getWasteReport>>>, TError = HTTPValidationError>(
 wasteReportId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWasteReport>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetWasteReportInfiniteQueryOptions(wasteReportId,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetWasteReportQueryOptions = <TData = Awaited<ReturnType<typeof getWasteReport>>, TError = HTTPValidationError>(wasteReportId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWasteReport>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWasteReportQueryKey(wasteReportId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWasteReport>>> = ({ signal }) => getWasteReport(wasteReportId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(wasteReportId),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWasteReport>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetWasteReportQueryResult = NonNullable<Awaited<ReturnType<typeof getWasteReport>>>
export type GetWasteReportQueryError = HTTPValidationError


export function useGetWasteReport<TData = Awaited<ReturnType<typeof getWasteReport>>, TError = HTTPValidationError>(
 wasteReportId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWasteReport>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWasteReport>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWasteReport<TData = Awaited<ReturnType<typeof getWasteReport>>, TError = HTTPValidationError>(
 wasteReportId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWasteReport>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWasteReport>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWasteReport<TData = Awaited<ReturnType<typeof getWasteReport>>, TError = HTTPValidationError>(
 wasteReportId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWasteReport>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read Waste Report
 */

export function useGetWasteReport<TData = Awaited<ReturnType<typeof getWasteReport>>, TError = HTTPValidationError>(
 wasteReportId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWasteReport>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetWasteReportQueryOptions(wasteReportId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update a waste report.
Regular users can only update their own reports, superusers can update any report.
 * @summary Update Waste Report
 */
export const updateWasteReport = (
    wasteReportId: number,
    wasteReportUpdate: WasteReportUpdate,
 ) => {
      
      
      return api<WasteReport>(
      {url: `/waste-reports/${wasteReportId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: wasteReportUpdate
    },
      );
    }
  


export const getUpdateWasteReportMutationOptions = <TData = Awaited<ReturnType<typeof updateWasteReport>>, TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{wasteReportId: number;data: WasteReportUpdate}, TContext>, }
) => {
const mutationKey = ['updateWasteReport'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateWasteReport>>, {wasteReportId: number;data: WasteReportUpdate}> = (props) => {
          const {wasteReportId,data} = props ?? {};

          return  updateWasteReport(wasteReportId,data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{wasteReportId: number;data: WasteReportUpdate}, TContext>}

    export type UpdateWasteReportMutationResult = NonNullable<Awaited<ReturnType<typeof updateWasteReport>>>
    export type UpdateWasteReportMutationBody = WasteReportUpdate
    export type UpdateWasteReportMutationError = HTTPValidationError

    /**
 * @summary Update Waste Report
 */
export const useUpdateWasteReport = <TData = Awaited<ReturnType<typeof updateWasteReport>>, TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{wasteReportId: number;data: WasteReportUpdate}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {wasteReportId: number;data: WasteReportUpdate},
        TContext
      > => {

      const mutationOptions = getUpdateWasteReportMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Delete a waste report.
Regular users can only delete their own reports, superusers can delete any report.
 * @summary Delete Waste Report
 */
export const deleteWasteReport = (
    wasteReportId: number,
 ) => {
      
      
      return api<unknown>(
      {url: `/waste-reports/${wasteReportId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteWasteReportMutationOptions = <TData = Awaited<ReturnType<typeof deleteWasteReport>>, TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{wasteReportId: number}, TContext>, }
) => {
const mutationKey = ['deleteWasteReport'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteWasteReport>>, {wasteReportId: number}> = (props) => {
          const {wasteReportId} = props ?? {};

          return  deleteWasteReport(wasteReportId,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{wasteReportId: number}, TContext>}

    export type DeleteWasteReportMutationResult = NonNullable<Awaited<ReturnType<typeof deleteWasteReport>>>
    
    export type DeleteWasteReportMutationError = HTTPValidationError

    /**
 * @summary Delete Waste Report
 */
export const useDeleteWasteReport = <TData = Awaited<ReturnType<typeof deleteWasteReport>>, TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{wasteReportId: number}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {wasteReportId: number},
        TContext
      > => {

      const mutationOptions = getDeleteWasteReportMutationOptions(options);

      return useMutation(mutationOptions);
    }
    