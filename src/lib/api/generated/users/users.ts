/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * FastAPI JWT Auth Boilerplate
 * FastAPI Boilerplate with JWT Authentication
 * OpenAPI spec version: 0.1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetUsersParams,
  HTTPValidationError,
  User,
  UserUpdate
} from '../../models'
import { api } from '../../../../api/mutator/axiosInstance';



/**
 * Retrieve users.
 * @summary Read Users
 */
export const getUsers = (
    params?: GetUsersParams,
 signal?: AbortSignal
) => {
      
      
      return api<User[]>(
      {url: `/users/`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetUsersQueryKey = (params?: GetUsersParams,) => {
    return [`/users/`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUsersInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getUsers>>, GetUsersParams['cursor']>, TError = HTTPValidationError>(params?: GetUsersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData, Awaited<ReturnType<typeof getUsers>>, QueryKey, GetUsersParams['cursor']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsers>>, QueryKey, GetUsersParams['cursor']> = ({ signal, pageParam }) => getUsers({...params, cursor: pageParam || params?.['cursor']}, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData, Awaited<ReturnType<typeof getUsers>>, QueryKey, GetUsersParams['cursor']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUsersInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUsers>>>
export type GetUsersInfiniteQueryError = HTTPValidationError


export function useGetUsersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUsers>>, GetUsersParams['cursor']>, TError = HTTPValidationError>(
 params: undefined |  GetUsersParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData, Awaited<ReturnType<typeof getUsers>>, QueryKey, GetUsersParams['cursor']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsers>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUsers>>, GetUsersParams['cursor']>, TError = HTTPValidationError>(
 params?: GetUsersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData, Awaited<ReturnType<typeof getUsers>>, QueryKey, GetUsersParams['cursor']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsers>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUsers>>, GetUsersParams['cursor']>, TError = HTTPValidationError>(
 params?: GetUsersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData, Awaited<ReturnType<typeof getUsers>>, QueryKey, GetUsersParams['cursor']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read Users
 */

export function useGetUsersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUsers>>, GetUsersParams['cursor']>, TError = HTTPValidationError>(
 params?: GetUsersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData, Awaited<ReturnType<typeof getUsers>>, QueryKey, GetUsersParams['cursor']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUsersInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUsersQueryOptions = <TData = Awaited<ReturnType<typeof getUsers>>, TError = HTTPValidationError>(params?: GetUsersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsers>>> = ({ signal }) => getUsers(params, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getUsers>>>
export type GetUsersQueryError = HTTPValidationError


export function useGetUsers<TData = Awaited<ReturnType<typeof getUsers>>, TError = HTTPValidationError>(
 params: undefined |  GetUsersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsers>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsers<TData = Awaited<ReturnType<typeof getUsers>>, TError = HTTPValidationError>(
 params?: GetUsersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsers>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsers<TData = Awaited<ReturnType<typeof getUsers>>, TError = HTTPValidationError>(
 params?: GetUsersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read Users
 */

export function useGetUsers<TData = Awaited<ReturnType<typeof getUsers>>, TError = HTTPValidationError>(
 params?: GetUsersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUsersQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Get a specific user by id.
 * @summary Read User By Id
 */
export const getUserById = (
    userId: number,
 signal?: AbortSignal
) => {
      
      
      return api<User>(
      {url: `/users/${userId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserByIdQueryKey = (userId: number,) => {
    return [`/users/${userId}`] as const;
    }

    
export const getGetUserByIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getUserById>>>, TError = HTTPValidationError>(userId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserByIdQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserById>>> = ({ signal }) => getUserById(userId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserByIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUserById>>>
export type GetUserByIdInfiniteQueryError = HTTPValidationError


export function useGetUserByIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserById>>>, TError = HTTPValidationError>(
 userId: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserByIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserById>>>, TError = HTTPValidationError>(
 userId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserByIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserById>>>, TError = HTTPValidationError>(
 userId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserById>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read User By Id
 */

export function useGetUserByIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserById>>>, TError = HTTPValidationError>(
 userId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserById>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserByIdInfiniteQueryOptions(userId,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUserByIdQueryOptions = <TData = Awaited<ReturnType<typeof getUserById>>, TError = HTTPValidationError>(userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserByIdQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserById>>> = ({ signal }) => getUserById(userId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getUserById>>>
export type GetUserByIdQueryError = HTTPValidationError


export function useGetUserById<TData = Awaited<ReturnType<typeof getUserById>>, TError = HTTPValidationError>(
 userId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserById<TData = Awaited<ReturnType<typeof getUserById>>, TError = HTTPValidationError>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserById<TData = Awaited<ReturnType<typeof getUserById>>, TError = HTTPValidationError>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read User By Id
 */

export function useGetUserById<TData = Awaited<ReturnType<typeof getUserById>>, TError = HTTPValidationError>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserByIdQueryOptions(userId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update a user.
 * @summary Update User
 */
export const updateUser = (
    userId: number,
    userUpdate: UserUpdate,
 ) => {
      
      
      return api<User>(
      {url: `/users/${userId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: userUpdate
    },
      );
    }
  


export const getUpdateUserMutationOptions = <TData = Awaited<ReturnType<typeof updateUser>>, TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{userId: number;data: UserUpdate}, TContext>, }
) => {
const mutationKey = ['updateUser'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateUser>>, {userId: number;data: UserUpdate}> = (props) => {
          const {userId,data} = props ?? {};

          return  updateUser(userId,data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{userId: number;data: UserUpdate}, TContext>}

    export type UpdateUserMutationResult = NonNullable<Awaited<ReturnType<typeof updateUser>>>
    export type UpdateUserMutationBody = UserUpdate
    export type UpdateUserMutationError = HTTPValidationError

    /**
 * @summary Update User
 */
export const useUpdateUser = <TData = Awaited<ReturnType<typeof updateUser>>, TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{userId: number;data: UserUpdate}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {userId: number;data: UserUpdate},
        TContext
      > => {

      const mutationOptions = getUpdateUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Delete a user.
 * @summary Delete User
 */
export const deleteUser = (
    userId: number,
 ) => {
      
      
      return api<User>(
      {url: `/users/${userId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteUserMutationOptions = <TData = Awaited<ReturnType<typeof deleteUser>>, TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{userId: number}, TContext>, }
) => {
const mutationKey = ['deleteUser'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteUser>>, {userId: number}> = (props) => {
          const {userId} = props ?? {};

          return  deleteUser(userId,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{userId: number}, TContext>}

    export type DeleteUserMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUser>>>
    
    export type DeleteUserMutationError = HTTPValidationError

    /**
 * @summary Delete User
 */
export const useDeleteUser = <TData = Awaited<ReturnType<typeof deleteUser>>, TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{userId: number}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {userId: number},
        TContext
      > => {

      const mutationOptions = getDeleteUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    